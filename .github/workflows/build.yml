name: Meatloaf Build and Deploy

on: [push]

jobs:
  version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install gh # Only needed if you want to use the github cli gh act
        run: |
          sudo mkdir -p -m 755 /etc/apt/keyrings && wget -qO- https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo tee /etc/apt/keyrings/githubcli-archive-keyring.gpg > /dev/null 
          sudo chmod go+r /etc/apt/keyrings/githubcli-archive-keyring.gpg 
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null 
          sudo apt update 
          sudo apt install gh -y
      - name: Calculates next version number
        id: version
        run: .github/scripts/calculate_version.py
      - name: Strore full version
        run: |
          echo '${{ steps.version.outputs.major }}.${{ steps.version.outputs.minor }}.${{ steps.version.outputs.patch }}' > version.txt
      - uses: actions/upload-artifact@v3.1.3 # 
        with:
          
          path: version.txt
    outputs:
      major: ${{ steps.version.outputs.major }}
      minor: ${{ steps.version.outputs.minor }}
      patch: ${{ steps.version.outputs.patch }}
      fw_version: ${{ steps.version.outputs.fw_version }}
      date: ${{ steps.version.outputs.date }}
      full_version: ${{ steps.version.outputs.major }}.${{ steps.version.outputs.minor }}.${{ steps.version.outputs.patch }}
      
  build:
    needs: version
    strategy:
      fail-fast: false
      matrix:
        environments: 
          - lolin-d32-pro#16mb
          - lolin-d32-pro#8mb
          - ttgo-t1#4mb
          # - esp32-wroom#8mb
          # - esp32-wroom#16mb
          # - esp32-wroom-pi1541
          - fujiapple-rev0#8mb
          - fujinet-v16#16mb
          - fujiloaf-rev0#16mb
    runs-on: ubuntu-latest
    env:
      major: ${{needs.version.outputs.major}}
      minor: ${{needs.version.outputs.minor}}
      patch: ${{needs.version.outputs.patch}}
      fw_version: ${{needs.version.outputs.fw_version}}
      date: ${{needs.version.outputs.date}}
      full_version: ${{needs.version.outputs.full_version}}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install PlatformIO Core
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio pyyaml
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.platformio/.cache
          key: ${{ runner.os }}-pio
      - name: Get environment and flash size
        run: |
          echo "build_environment="$( echo ${{ matrix.environments }} | grep -Po '.+?(?=#)' ) >> $GITHUB_ENV
          echo "flash_size="$( echo ${{ matrix.environments }} | grep -Po '(?<=#).*' ) >> $GITHUB_ENV
      - name: Create platrform.ini for ${{ env.build_environment }} ${{ env.flash_size }}
        run: python .github/scripts/create_config.py environment=${{ env.build_environment }} flash_size=${{ env.flash_size }}
      - name: Update version ${{ env.major }}.${{ env.minor }}.${{ env.patch }}, FW version ${{ env.fw_version }}, Date ${{ env.date }}
        run: python .github/scripts/update_version.py '${{ env.major }}' '${{ env.minor }}' '${{ env.patch }}' '${{ env.fw_version }}' '${{ env.date }}'
      - name: Build Meatloaf for ${{ env.build_environment }} ${{ env.flash_size }}
        run: pio run
      - name: Rename file meatloaf.${{ env.build_environment }}.bin -> meatloaf.${{ env.build_environment }}.${{ env.flash_size }}-${{ env.full_version }}.bin  
        run: mv bin/meatloaf.${{ env.build_environment }}.bin bin/meatloaf.${{ env.build_environment }}.${{ env.flash_size }}-${{ env.full_version }}.bin
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3.1.3
        with:
          name: meatloaf.${{ env.build_environment }}.${{ env.flash_size }}-${{ env.full_version }}.bin
          path: bin/*.bin

  create-tag:
    needs: build
    runs-on: ubuntu-latest
    env:
      full_version: ${{ needs.version.outputs.full_version }}
    steps:
      - uses: actions/checkout@v4
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v3
        id: download
        with:
          path: artifacts
          merge-multiple: true
      - name: Get version tag
        run: |
          echo ${{steps.download.outputs.download-path}}
          ls -la artifacts/artifact
          echo "full_version=$(cat artifacts/artifact/version.txt)" >> $GITHUB_ENV
          rm -rf artifacts/artifact
      - name: Collect all artifacts
        run: |
          mkdir uploads
          mkdir uploads/${{ env.full_version }}
          mv artifacts/meatloaf*/* uploads/${{ env.full_version }}/
      - name: Upload build version ${{ env.full_version }}
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          username: ${{ secrets.FTP_USER }}
          password: ${{ secrets.FTP_PASSWORD }}
          server: ${{ vars.FTP_SERVER }}
          port: ${{ vars.FTP_PORT }}
          local-dir: uploads/
          server-dir: ${{ vars.FTP_PATH }}
          # dry-run: true
      - name: Create Release ${{ env.full_version }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ env.full_version }}
          release_name: Release ${{ env.full_version }}
